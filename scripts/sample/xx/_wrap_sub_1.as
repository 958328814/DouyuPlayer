package sample.xx
{
   import avm2.intrinsics.memory.si32;
   import sample.xx__3A__5C_FlasCC_1_2E_0_2E_0_5C_cygwin_5C_tmp_5C_ccvV9AI3_2E_o_3A_da20dbdf_2D_caa3_2D_4453_2D_b603_2D_506343b80641.*;
   
   public function _wrap_sub_1(param1:String, param2:String, param3:String, param4:String, param5:String, param6:String, param7:int, param8:int, param9:int, param10:String, param11:String) : int
   {
      var _loc27_:* = undefined;
      var _loc26_:* = 0;
      var _loc16_:int = 0;
      var _loc17_:int = 0;
      var _loc18_:int = 0;
      var _loc19_:int = 0;
      var _loc20_:int = 0;
      var _loc21_:int = 0;
      var _loc22_:* = 0;
      var _loc23_:* = 0;
      var _loc24_:* = 0;
      var _loc25_:int = 0;
      var _loc15_:int = 0;
      var _loc14_:int = 0;
      var _loc12_:* = int(ESP);
      _loc26_ = _loc12_;
      ESP = _loc12_ & -16;
      _loc16_ = CModule.mallocString(param1);
      ESP = _loc12_ & -16;
      _loc17_ = CModule.mallocString(param2);
      ESP = _loc12_ & -16;
      _loc18_ = CModule.mallocString(param3);
      ESP = _loc12_ & -16;
      _loc19_ = CModule.mallocString(param4);
      ESP = _loc12_ & -16;
      _loc20_ = CModule.mallocString(param5);
      ESP = _loc12_ & -16;
      _loc21_ = CModule.mallocString(param6);
      _loc22_ = param7;
      _loc23_ = param8;
      _loc24_ = param9;
      ESP = _loc12_ & -16;
      _loc25_ = CModule.mallocString(param10);
      ESP = _loc12_ & -16;
      _loc15_ = CModule.mallocString(param11);
      _loc12_ = int(_loc12_ - 48);
      si32(_loc15_,_loc12_ + 40);
      si32(_loc25_,_loc12_ + 36);
      si32(_loc24_,_loc12_ + 32);
      si32(_loc23_,_loc12_ + 28);
      si32(_loc22_,_loc12_ + 24);
      si32(_loc21_,_loc12_ + 20);
      si32(_loc20_,_loc12_ + 16);
      si32(_loc19_,_loc12_ + 12);
      si32(_loc18_,_loc12_ + 8);
      si32(_loc17_,_loc12_ + 4);
      si32(_loc16_,_loc12_);
      ESP = _loc12_;
      F_sub_1();
      _loc12_ = int(_loc12_ + 48);
      _loc14_ = eax;
      _loc12_ = int(_loc12_ - 16);
      si32(_loc16_,_loc12_);
      ESP = _loc12_;
      F_free();
      _loc12_ = int(_loc12_ + 16);
      _loc12_ = int(_loc12_ - 16);
      si32(_loc17_,_loc12_);
      ESP = _loc12_;
      F_free();
      _loc12_ = int(_loc12_ + 16);
      _loc12_ = int(_loc12_ - 16);
      si32(_loc18_,_loc12_);
      ESP = _loc12_;
      F_free();
      _loc12_ = int(_loc12_ + 16);
      _loc12_ = int(_loc12_ - 16);
      si32(_loc19_,_loc12_);
      ESP = _loc12_;
      F_free();
      _loc12_ = int(_loc12_ + 16);
      _loc12_ = int(_loc12_ - 16);
      si32(_loc20_,_loc12_);
      ESP = _loc12_;
      F_free();
      _loc12_ = int(_loc12_ + 16);
      _loc12_ = int(_loc12_ - 16);
      si32(_loc21_,_loc12_);
      ESP = _loc12_;
      F_free();
      _loc12_ = int(_loc12_ + 16);
      _loc12_ = int(_loc12_ - 16);
      si32(_loc25_,_loc12_);
      ESP = _loc12_;
      F_free();
      _loc12_ = int(_loc12_ + 16);
      _loc12_ = int(_loc12_ - 16);
      si32(_loc15_,_loc12_);
      ESP = _loc12_;
      F_free();
      _loc12_ = int(_loc12_ + 16);
      var _loc13_:* = _loc14_;
      _loc27_ = _loc13_;
      _loc12_ = _loc26_;
      ESP = _loc12_;
      return _loc27_;
   }
}
