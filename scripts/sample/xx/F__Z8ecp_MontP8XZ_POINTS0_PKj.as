package sample.xx
{
   import avm2.intrinsics.memory.li32;
   import avm2.intrinsics.memory.si32;
   import sample.xx__3A__5C_FlasCC_1_2E_0_2E_0_5C_cygwin_5C_tmp_5C_ccLa1Ogg_2E_o_3A_d2a01b4f_2D_d3fd_2D_4bec_2D_9cd5_2D_5487db2cdd80.*;
   
   public function F__Z8ecp_MontP8XZ_POINTS0_PKj() : void
   {
      var _loc2_:* = 0;
      var _loc4_:* = 0;
      var _loc5_:int = 0;
      var _loc6_:int = 0;
      var _loc7_:int = 0;
      var _loc8_:* = 0;
      var _loc9_:int = 0;
      var _loc10_:int = 0;
      var _loc11_:int = 0;
      var _loc12_:int = 0;
      var _loc1_:* = 0;
      var _loc3_:* = int(ESP);
      _loc2_ = _loc3_;
      _loc3_ = int(_loc3_ - 160);
      _loc3_ = int(_loc3_ - 16);
      _loc4_ = li32(_loc2_);
      si32(_loc4_,_loc3_ + 4);
      _loc5_ = _loc2_ - 32;
      si32(_loc5_,_loc3_);
      _loc6_ = _loc4_ + 32;
      si32(_loc6_,_loc3_ + 8);
      ESP = _loc3_;
      F_ecp_SubReduce();
      _loc3_ = int(_loc3_ + 16);
      _loc3_ = int(_loc3_ - 16);
      si32(_loc6_,_loc3_ + 8);
      si32(_loc4_,_loc3_ + 4);
      _loc7_ = _loc2_ - 64;
      si32(_loc7_,_loc3_);
      ESP = _loc3_;
      F_ecp_AddReduce();
      _loc3_ = int(_loc3_ + 16);
      _loc3_ = int(_loc3_ - 16);
      _loc8_ = li32(_loc2_ + 4);
      _loc9_ = _loc8_ + 32;
      si32(_loc9_,_loc3_ + 8);
      si32(_loc8_,_loc3_ + 4);
      _loc10_ = _loc2_ - 96;
      si32(_loc10_,_loc3_);
      ESP = _loc3_;
      F_ecp_SubReduce();
      _loc3_ = int(_loc3_ + 16);
      _loc3_ = int(_loc3_ - 16);
      si32(_loc9_,_loc3_ + 8);
      si32(_loc8_,_loc3_ + 4);
      _loc11_ = _loc2_ - 128;
      si32(_loc11_,_loc3_);
      ESP = _loc3_;
      F_ecp_AddReduce();
      _loc3_ = int(_loc3_ + 16);
      _loc3_ = int(_loc3_ - 16);
      si32(_loc11_,_loc3_ + 8);
      si32(_loc5_,_loc3_ + 4);
      si32(_loc5_,_loc3_);
      ESP = _loc3_;
      F_ecp_MulReduce();
      _loc3_ = int(_loc3_ + 16);
      _loc3_ = int(_loc3_ - 16);
      si32(_loc10_,_loc3_ + 8);
      si32(_loc7_,_loc3_ + 4);
      si32(_loc7_,_loc3_);
      ESP = _loc3_;
      F_ecp_MulReduce();
      _loc3_ = int(_loc3_ + 16);
      _loc3_ = int(_loc3_ - 16);
      si32(_loc7_,_loc3_ + 8);
      si32(_loc5_,_loc3_ + 4);
      _loc12_ = _loc2_ - 160;
      si32(_loc12_,_loc3_);
      ESP = _loc3_;
      F_ecp_AddReduce();
      _loc3_ = int(_loc3_ + 16);
      _loc3_ = int(_loc3_ - 16);
      si32(_loc7_,_loc3_ + 8);
      si32(_loc5_,_loc3_ + 4);
      si32(_loc7_,_loc3_);
      ESP = _loc3_;
      F_ecp_SubReduce();
      _loc3_ = int(_loc3_ + 16);
      _loc3_ = int(_loc3_ - 16);
      si32(_loc12_,_loc3_ + 4);
      si32(_loc4_,_loc3_);
      ESP = _loc3_;
      F_ecp_SqrReduce();
      _loc3_ = int(_loc3_ + 16);
      _loc3_ = int(_loc3_ - 16);
      si32(_loc7_,_loc3_ + 4);
      si32(_loc5_,_loc3_);
      ESP = _loc3_;
      F_ecp_SqrReduce();
      _loc3_ = int(_loc3_ + 16);
      _loc3_ = int(_loc3_ - 16);
      _loc1_ = li32(_loc2_ + 8);
      si32(_loc1_,_loc3_ + 8);
      si32(_loc5_,_loc3_ + 4);
      si32(_loc6_,_loc3_);
      ESP = _loc3_;
      F_ecp_MulReduce();
      _loc3_ = int(_loc3_ + 16);
      _loc3_ = int(_loc3_ - 16);
      si32(_loc11_,_loc3_ + 4);
      si32(_loc5_,_loc3_);
      ESP = _loc3_;
      F_ecp_SqrReduce();
      _loc3_ = int(_loc3_ + 16);
      _loc3_ = int(_loc3_ - 16);
      si32(_loc10_,_loc3_ + 4);
      si32(_loc7_,_loc3_);
      ESP = _loc3_;
      F_ecp_SqrReduce();
      _loc3_ = int(_loc3_ + 16);
      _loc3_ = int(_loc3_ - 16);
      si32(_loc7_,_loc3_ + 8);
      si32(_loc5_,_loc3_ + 4);
      si32(_loc8_,_loc3_);
      ESP = _loc3_;
      F_ecp_MulReduce();
      _loc3_ = int(_loc3_ + 16);
      _loc3_ = int(_loc3_ - 16);
      si32(_loc7_,_loc3_ + 8);
      si32(_loc5_,_loc3_ + 4);
      si32(_loc7_,_loc3_);
      ESP = _loc3_;
      F_ecp_SubReduce();
      _loc3_ = int(_loc3_ + 16);
      _loc3_ = int(_loc3_ - 16);
      si32(_loc7_,_loc3_ + 12);
      si32(121665,_loc3_ + 8);
      si32(_loc5_,_loc3_ + 4);
      si32(_loc5_,_loc3_);
      ESP = _loc3_;
      F_ecp_WordMulAddReduce();
      _loc3_ = int(_loc3_ + 16);
      _loc3_ = int(_loc3_ - 16);
      si32(_loc7_,_loc3_ + 8);
      si32(_loc5_,_loc3_ + 4);
      si32(_loc9_,_loc3_);
      ESP = _loc3_;
      F_ecp_MulReduce();
      _loc3_ = int(_loc3_ + 16);
      _loc3_ = _loc2_;
      ESP = _loc3_;
   }
}
