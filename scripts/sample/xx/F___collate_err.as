package sample.xx
{
   import sample.xx_ollate_2E_o_3A_3327D5DA_2D_F857_2D_46DE_2D_A662_2D_F85F52217D45.*;
   import avm2.intrinsics.memory.li32;
   import avm2.intrinsics.memory.si32;
   
   public function F___collate_err() : void
   {
      var _loc3_:* = 0;
      var _loc1_:* = 0;
      var _loc4_:* = 0;
      var _loc5_:int = 0;
      var _loc2_:int = ESP;
      _loc3_ = _loc2_;
      ESP = _loc2_;
      F___error();
      _loc1_ = int(eax);
      _loc1_ = li32(_loc1_);
      ESP = _loc2_;
      F__getprogname();
      _loc5_ = eax;
      _loc2_ = _loc2_ - 16;
      si32(_loc5_,_loc2_);
      ESP = _loc2_;
      F_strlen();
      _loc2_ = _loc2_ + 16;
      _loc4_ = int(eax);
      _loc2_ = _loc2_ - 16;
      si32(_loc4_,_loc2_ + 8);
      si32(_loc5_,_loc2_ + 4);
      si32(2,_loc2_);
      ESP = _loc2_;
      F__write();
      _loc2_ = _loc2_ + 16;
      _loc2_ = _loc2_ - 16;
      si32(2,_loc2_ + 8);
      si32(L__2E_str,_loc2_ + 4);
      si32(2,_loc2_);
      ESP = _loc2_;
      F__write();
      _loc2_ = _loc2_ + 16;
      _loc2_ = _loc2_ - 16;
      _loc4_ = li32(_loc3_ + 4);
      si32(_loc4_,_loc2_);
      ESP = _loc2_;
      F_strlen();
      _loc2_ = _loc2_ + 16;
      _loc5_ = eax;
      _loc2_ = _loc2_ - 16;
      si32(_loc5_,_loc2_ + 8);
      si32(_loc4_,_loc2_ + 4);
      si32(2,_loc2_);
      ESP = _loc2_;
      F__write();
      _loc2_ = _loc2_ + 16;
      _loc2_ = _loc2_ - 16;
      si32(2,_loc2_ + 8);
      si32(L__2E_str,_loc2_ + 4);
      si32(2,_loc2_);
      ESP = _loc2_;
      F__write();
      _loc2_ = _loc2_ + 16;
      _loc2_ = _loc2_ - 16;
      si32(_loc1_,_loc2_);
      ESP = _loc2_;
      F_strerror();
      _loc2_ = _loc2_ + 16;
      _loc1_ = int(eax);
      _loc2_ = _loc2_ - 16;
      si32(_loc1_,_loc2_);
      ESP = _loc2_;
      F_strlen();
      _loc2_ = _loc2_ + 16;
      _loc5_ = eax;
      _loc2_ = _loc2_ - 16;
      si32(_loc5_,_loc2_ + 8);
      si32(_loc1_,_loc2_ + 4);
      si32(2,_loc2_);
      ESP = _loc2_;
      F__write();
      _loc2_ = _loc2_ + 16;
      _loc2_ = _loc2_ - 16;
      si32(1,_loc2_ + 8);
      si32(L__2E_str1,_loc2_ + 4);
      si32(2,_loc2_);
      ESP = _loc2_;
      F__write();
      _loc2_ = _loc2_ + 16;
      _loc2_ = _loc2_ - 16;
      _loc1_ = li32(_loc3_);
      si32(_loc1_,_loc2_);
      ESP = _loc2_;
      F_exit();
      _loc2_ = _loc2_ + 16;
   }
}
